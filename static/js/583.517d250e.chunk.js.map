{"version":3,"file":"static/js/583.517d250e.chunk.js","mappings":"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","sources":["Firebase/isUsernameAvailable.js","Pages/ChangeProfile/change-profile.jsx"],"sourcesContent":["import { collection, getDocs } from \"firebase/firestore\";\r\nimport { db } from \"./config\";\r\n\r\nasync function isUsernameAvailable(name){\r\n    const allUsers = await getDocs(collection(db, \"users\"));\r\n    let isAvailable = true;\r\n\r\n    allUsers.forEach(user => {\r\n        const nameOfUser = user.data().username\r\n        if(nameOfUser === name){\r\n            isAvailable = false;\r\n            return;\r\n        }\r\n    })\r\n\r\n    return isAvailable;\r\n}\r\n\r\nexport default isUsernameAvailable;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport * as RoutesTypes from \"../../Constants/routesTypes\"\r\nimport isUsernameAvailable from \"../../Firebase/isUsernameAvailable\";\r\nimport { doc, updateDoc } from \"firebase/firestore\";\r\nimport { db } from \"../../Firebase/config\";\r\nimport { setActiveUser } from \"../../Redux/Actions/userActions\";\r\nimport { updateEmail, getAuth } from \"firebase/auth\";\r\nimport { Confirmation } from \"../../Components\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ChangeImage } from \"../../Components\";\r\nimport \"./change-profile.scss\";\r\nimport { setIsPageDisabled } from \"../../Redux/Actions/disabledActions\";\r\nimport { setIsBeingLoaded } from \"../../Redux/Actions/isBeingLoadedActions\";\r\n\r\nexport default function ChangeProfile() {\r\n    const user = useSelector(obj => obj.currentUser.user);\r\n    const isPageDisabled = useSelector(obj => obj.isPageDisabled);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const [changeProfileImage, setChangeProfileImage] = useState(false);\r\n    const [errors, setErrors] = useState(\"\");\r\n    const [profileInfo, setProfileInfo] = useState({\r\n        emailAddress: user.emailAddress,\r\n        username: user.username,\r\n        fullName: user.fullName,\r\n        gender: user.gender,\r\n        birthday: user.birthday,\r\n        phoneNumber: user.phoneNumber,\r\n    })\r\n    const [isAvailable, setIsAvailable] = useState(false);\r\n\r\n    const isInvalid = profileInfo.emailAddress.length < 6\r\n        || profileInfo.username.length < 6\r\n        || profileInfo.fullName.length < 6\r\n\r\n    useEffect(() => {\r\n        if (!user.username) {\r\n            navigate(RoutesTypes.LOGIN)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        async function asyncPromise() {\r\n            if ([\"\", \"Male\", \"Female\"].every(elem => elem !== profileInfo.gender)) {\r\n                setErrors(\"The gender can only be \\\"Male\\\" or \\\"Female\\\"\");\r\n                setIsAvailable(false);\r\n                return;\r\n            }\r\n            setErrors(\"\");\r\n\r\n            const handleIsAvailable = await isUsernameAvailable(profileInfo.username);\r\n\r\n            if (!handleIsAvailable && profileInfo.username !== user.username) {\r\n                setErrors(\"This username is not available\");\r\n                setIsAvailable(false);\r\n                return;\r\n            };\r\n            setErrors(\"\");\r\n\r\n            setIsAvailable(true);\r\n            return;\r\n        }\r\n\r\n        asyncPromise();\r\n    }, [profileInfo.username, profileInfo.gender])\r\n\r\n    async function handleChange() {\r\n        dispatch(setIsBeingLoaded(true));\r\n\r\n        await updateDoc(doc(db, \"users\", user.userId), profileInfo)\r\n\r\n        if (user.emailAddress !== profileInfo.emailAddress) {\r\n            const currentAuth = getAuth();\r\n            await updateEmail(currentAuth.currentUser, profileInfo.emailAddress);\r\n        }\r\n\r\n        dispatch(setActiveUser({ ...user, ...profileInfo }))\r\n\r\n        dispatch(setIsBeingLoaded(false));\r\n        navigate(RoutesTypes.PROFILE)\r\n    }\r\n\r\n    return (\r\n        <motion.div\r\n            className=\"div-column\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n        >\r\n            {isPageDisabled &&\r\n                <Confirmation\r\n                    text=\"change your profile\"\r\n                    callback={handleChange}\r\n                />\r\n            }\r\n            <div className={`login-register col-11 col-sm-8 col-md-9 col-lg-7 ${isPageDisabled && \"disabled-page\"}`}>\r\n                <img\r\n                    src=\"../Images/icon.svg\"\r\n                    className=\"login-register-icon\"\r\n                />\r\n                <button\r\n                    className=\"switch\"\r\n                    onClick={() => setChangeProfileImage(prevVal => !prevVal)}\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\" />\r\n                    </svg>\r\n                </button>\r\n                {changeProfileImage ?\r\n                    <ChangeImage /> :\r\n                    <>\r\n                        <h1>Change Profile Data</h1>\r\n                        {errors.length ?\r\n                            <p className=\"info red\">{errors}</p> :\r\n                            <p className=\"info\">Push <b>Change</b> to continue</p>\r\n                        }\r\n                        <form\r\n                            method=\"POST\"\r\n                            className=\"login-register-form change-user-form\"\r\n                        >\r\n                            <div>\r\n                                <p className=\"\">Username</p>\r\n                                <input\r\n                                    aria-label=\"Enter your username\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={profileInfo.username}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, username: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"\">Full Name</p>\r\n                                <input\r\n                                    aria-label=\"Enter your full name\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Full name\"\r\n                                    value={profileInfo.fullName}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, fullName: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"\">Email Address</p>\r\n                                <input\r\n                                    aria-label=\"Enter your email address\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email address\"\r\n                                    value={profileInfo.emailAddress}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, emailAddress: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"\">Gender</p>\r\n                                <input\r\n                                    aria-label=\"Enter your gender\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Gender\"\r\n                                    value={profileInfo.gender}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, gender: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"\">Birthday</p>\r\n                                <input\r\n                                    aria-label=\"Enter your birthday\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Birthdate\"\r\n                                    value={profileInfo.birthday}\r\n                                    onFocus={(event) => (event.target.type = \"date\")}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, birthday: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <p className=\"\">Phone Number</p>\r\n                                <input\r\n                                    aria-label=\"Enter your phone number\"\r\n                                    className=\"change-user-input\"\r\n                                    type=\"tel\"\r\n                                    pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\r\n                                    placeholder=\"Phone number\"\r\n                                    value={profileInfo.phoneNumber}\r\n                                    onChange={(event) => setProfileInfo(prevInfo => ({ ...prevInfo, phoneNumber: event.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"check-out\">\r\n                                <button\r\n                                    disabled={!isAvailable || isInvalid}\r\n                                    type=\"submit\"\r\n                                    className={`check-out-button ${(!isAvailable || isInvalid) && \"disabled-button\"}`}\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        dispatch(setIsPageDisabled(true));\r\n                                    }}\r\n                                >\r\n                                    <h2 className=\"h2-default\">Change</h2>\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </>\r\n                }\r\n                <div className=\"link\">\r\n                    <p className=\"info\">Return to</p>\r\n                    <Link to={RoutesTypes.PROFILE} className=\"info blue\">Profile</Link>\r\n                </div>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}"],"names":["isUsernameAvailable","name","getDocs","collection","db","allUsers","isAvailable","forEach","user","data","username","ChangeProfile","useSelector","obj","currentUser","isPageDisabled","dispatch","useDispatch","navigate","useNavigate","useState","changeProfileImage","setChangeProfileImage","errors","setErrors","emailAddress","fullName","gender","birthday","phoneNumber","profileInfo","setProfileInfo","setIsAvailable","isInvalid","length","setIsBeingLoaded","updateDoc","doc","userId","currentAuth","getAuth","updateEmail","setActiveUser","RoutesTypes","useEffect","every","elem","asyncPromise","motion","className","initial","opacity","animate","exit","text","callback","src","onClick","prevVal","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","method","type","placeholder","value","onChange","event","prevInfo","target","onFocus","pattern","disabled","preventDefault","setIsPageDisabled","to"],"sourceRoot":""}